@inproceedings{rajpurkar2018know,
    title="Know What You Don{'}t Know: Unanswerable Questions for {SQ}u{AD}",
    author="Rajpurkar, Pranav and Jia, Robin and Liang, Percy",
    booktitle="Association for Computational Linguistics (ACL)",
    year="2018",
}

@inproceedings{pythia,
author = {Svyatkovskiy, Alexey and Zhao, Ying and Fu, Shengyu and Sundaresan, Neel},
title = {Pythia: AI-Assisted Code Completion System},
year = {2019},
isbn = {9781450362016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3292500.3330699},
doi = {10.1145/3292500.3330699},
booktitle = {Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining},
pages = {2727–2735},
numpages = {9},
keywords = {neural networks, code completion, naturalness of software},
location = {Anchorage, AK, USA},
series = {KDD ’19}
}

@inproceedings{Pandita2012,
author = {Pandita, Rahul and Xiao, Xusheng and Zhong, Hao and Xie, Tao and Oney, Stephen and Paradkar, Amit},
title = {Inferring Method Specifications from Natural Language API Descriptions},
year = {2012},
isbn = {9781467310673},
publisher = {IEEE Press},
booktitle = {Proceedings of the 34th International Conference on Software Engineering},
pages = {815–825},
numpages = {11},
location = {Zurich, Switzerland},
series = {ICSE ’12}
}



@inproceedings{Reiss,
author = {Reiss, Steven P.},
title = {Semantics-Based Code Search},
year = {2009},
isbn = {9781424434534},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICSE.2009.5070525},
doi = {10.1109/ICSE.2009.5070525},
booktitle = {Proceedings of the 31st International Conference on Software Engineering},
pages = {243–253},
numpages = {11},
series = {ICSE ’09}
}





@article{Little2009,
	abstract = {
Keyword programming is a novel technique for reducing the need to remember details of programming language syntax and APIs, by translating a small number of unordered keywords provided by the user into a valid expression. In a sense, the keywords act as a query that searches the space of expressions that are valid in the given context. Prior work has demonstrated the feasibility and merit of this approach in limited domains. This paper explores the potential for employing this technique in much larger domains, specifically general-purpose programming languages like Java. We present an algorithm for translating keywords into Java method call expressions. When tested on keywords extracted from existing method calls in Java code, the algorithm can accurately reconstruct over 90\% of the original expressions. We tested the algorithm on keywords provided by users in a web-based study. The results suggest that users can obtain correct Java code using keyword queries as accurately as they can write the correct Java code themselves. We implemented the algorithm in an Eclipse plug-in as an extension to the autocomplete mechanism and deployed it in a preliminary field study of several users, with mixed results. One interesting result of this work is that most of the information in Java method call expressions lies in the keywords, and details of punctuation and even parameter ordering can often be inferred automatically.
},
	affiliation = {MIT CSAIL},
	author = {Little, Greg and Miller, Robert C.},
	copyright = {Springer Science+Business Media, LLC},
	doi = {10.1007/s10515-008-0041-9},
	journal = {Automated Software Engineering},
	keywords = {Java; Autocomplete; Code assistants},
	language = {English},
	number = {1},
	pages = {37-71},
	title = {Keyword programming in Java},
	volume = {16},
	year = {2009},
}




@inproceedings{lee2019learning,
    title={Learning Autocomplete Systems as a Communication Game},
    author={Mina Lee and Tatsunori B. Hashimoto and Percy Liang},
    year={2019},
    eprint={1911.06964},
    archivePrefix={arXiv},
    primaryClass={cs.CL}
}

@inproceedings{copy_mech,
author = {See, Abigail and Liu, Peter and Manning, Christoper},
year = {2017},
month = {01},
pages = {1073-1083},
title = {Get To The Point: Summarization with Pointer-Generator Networks},
doi = {10.18653/v1/P17-1099}
}